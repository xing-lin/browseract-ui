name: Release on main (publish + deploy storybook to other repo)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: write

env:
  TARGET_REPO: 'xing-lin/xing-lin.github.io'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (full history & tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package (rollup)
        run: npm run build

      - name: Run semantic-release (determine version, tag, update package.json, publish to npm)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

      - name: Fetch latest main (get semantic-release's commits / updated package.json & tags)
        run: |
          git fetch origin main --tags
          git checkout main
          git reset --hard origin/main
          git --no-pager log -n 5 --pretty=oneline

      - name: Show package version (debug)
        run: |
          echo "package.json version:"
          node -p "require('./package.json').version"

      - name: Build Storybook static
        run: npm run build-storybook

      - name: Deploy storybook-static to target repo (replace static/storybook-static)
        env:
          TARGET_REPO: ${{ env.TARGET_REPO }}
          TARGET_REPO_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_ACTOR: github-actions
        run: |
          set -euo pipefail

          if [ -z "${TARGET_REPO}" ]; then
            echo "ERROR: TARGET_REPO env is empty."
            exit 1
          fi
          if [ -z "${TARGET_REPO_TOKEN:-}" ]; then
            echo "ERROR: TARGET_REPO_TOKEN secret is empty."
            exit 2
          fi

          SRC_DIR="${GITHUB_WORKSPACE}/storybook-static"
          if [ ! -d "$SRC_DIR" ]; then
            echo "ERROR: storybook build output not found at ${SRC_DIR}"
            exit 3
          fi

          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Deploying storybook v${PACKAGE_VERSION} to ${TARGET_REPO}:main (path: static/storybook-static)"

          TMP_DIR=$(mktemp -d)
          echo "Cloning target repo into ${TMP_DIR}"
          git -c http.extraHeader="Authorization: Bearer ${TARGET_REPO_TOKEN}" clone --depth 1 "https://github.com/${TARGET_REPO}.git" "${TMP_DIR}"

          cd "${TMP_DIR}"

          if git rev-parse --verify origin/main >/dev/null 2>&1; then
            git checkout main
            git reset --hard origin/main
          else
            git checkout --orphan main
            git rm -rf .
            git commit --allow-empty -m "chore: initialize main branch"
            git -c http.extraHeader="Authorization: Bearer ${TARGET_REPO_TOKEN}" push origin main || true
          fi

          TARGET_PATH="static/storybook-static"
          rm -rf "${TARGET_PATH}" || true
          mkdir -p "$(dirname "${TARGET_PATH}")"
          cp -R "${SRC_DIR}/." "${TARGET_PATH}/"

          git config user.name "github-actions[bot]" || true
          git config user.email "github-actions[bot]@users.noreply.github.com" || true

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to deploy (storybook content identical)."
          else
            git commit -m "chore(storybook): deploy storybook v${PACKAGE_VERSION} from $GITHUB_REPOSITORY@${GITHUB_SHA}"
            git -c http.extraHeader="Authorization: Bearer ${TARGET_REPO_TOKEN}" push origin main
            echo "Pushed storybook to ${TARGET_REPO}:main"
          fi

      - name: Done
        run: echo "Release + Storybook deploy finished."
