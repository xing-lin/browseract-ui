name: Release on main (test -> publish -> deploy storybook)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: write

env:
  TARGET_REPO: 'xing-lin/xing-lin.github.io'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (full history & tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run tests with coverage
        run: |
          npm run test:coverage

      - name: Show coverage files (debug)
        run: |
          echo "Coverage folder listing (for debug):"
          ls -la coverage || true
          find coverage -maxdepth 4 -type f -print || true
          if [ -f coverage/lcov.info ]; then
            echo "lcov found: coverage/lcov.info"
            echo "---- head of lcov.info ----"
            head -n 20 coverage/lcov.info || true
            echo "---- end head ----"
          else
            echo "WARNING: coverage/lcov.info not found. Ensure vitest is configured with reporters including 'lcov'."
            exit 1
          fi

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: coverage/lcov.info

      - name: Build package (rollup)
        run: npm run build

      - name: Run semantic-release (determine version, tag, update package.json, publish to npm)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

      - name: Fetch latest main (get semantic-release's commits / updated package.json & tags)
        run: |
          git fetch origin main --tags
          git checkout main
          git reset --hard origin/main
          git --no-pager log -n 5 --pretty=oneline

      - name: Show package version (debug)
        run: |
          echo "package.json version:"
          node -p "require('./package.json').version"
      - name: Show package version (debug)
        run: |
          echo "package.json version:"
          node -p "require('./package.json').version"

      - name: Notify Feishu (publish)
        # 不论成功失败都不影响后续步骤
        continue-on-error: true
        env:
          FEISHU_WEBHOOK: ${{ secrets.FEISHU_WEBHOOK }}
          FEISHU_SECRET: ${{ secrets.FEISHU_SECRET }}
          PACKAGE_VERSION: ${{ steps.show_package_version.outputs.version || '' }}
        run: |
          set -euo pipefail

          # --- 获取版本（如果上一步没有输出，也从 package.json 读） ---
          if [ -z "${PACKAGE_VERSION:-}" ]; then
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
          fi

          # 规范化 tag 名（如果 version 已以 v 开头就直接用，否则加 v 前缀）
          if [[ "${PACKAGE_VERSION}" == v* ]]; then
            TAG_NAME="${PACKAGE_VERSION}"
          else
            TAG_NAME="v${PACKAGE_VERSION}"
          fi

          # Release URL 可直接打开 changelog
          TAG_URL="https://github.com/${GITHUB_REPOSITORY}/releases/tag/${TAG_NAME}"

          # 使用秒级 timestamp（若需毫秒可改为 python3 取毫秒）
          timestamp=$(date +%s)

          # 构造 string_to_sign（必须含真实换行）
          string_to_sign=$(printf "%s\n%s" "$timestamp" "$FEISHU_SECRET")

          # 用 string_to_sign 作为 HMAC key，对 空消息 做 HMAC-SHA256，输出二进制并 base64
          sign=$(printf "" | openssl dgst -sha256 -hmac "$string_to_sign" -binary | base64)

          # URL-encode 签名（优先使用 python3 的 urllib.parse.quote，稳妥）
          if command -v python3 >/dev/null 2>&1; then
            sign_enc=$(python3 -c "import sys,urllib.parse; print(urllib.parse.quote(sys.stdin.read().strip(), safe=''))" <<<"$sign")
          else
            # 兜底的简单 urlencode（只针对 base64 中常见字符）
            sign_enc=$(echo -n "$sign" | sed -e 's/+/%2B/g' -e 's/\//%2F/g' -e 's/=/%3D/g')
          fi

          # 构造消息体（使用 cat <<JSON 保证变量会被展开且不产生多余缩进）
          json=$(cat <<JSON
          {"msg_type":"text","content":{"text":"🚀 发布成功\nRepository: ${GITHUB_REPOSITORY}\nVersion: ${PACKAGE_VERSION}\nCommit: ${GITHUB_SHA}\nWorkflow: ${GITHUB_WORKFLOW}\nRelease: ${TAG_URL}"}}
          JSON
          )

          # 发送请求；即使失败也不要让 step 返回非 0
          FEISHU_URL="${FEISHU_WEBHOOK}?timestamp=${timestamp}&sign=${sign_enc}"
          echo "Sending notification to Feishu (non-blocking)..."
          resp=$(curl -s -X POST "${FEISHU_URL}" \
            -H "Content-Type: application/json" \
            -d "${json}" ) || true

          echo "Feishu response: $resp"

      - name: Build Storybook static
        run: npm run build-storybook

      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          token: ${{ secrets.PAT_TOKEN }}
          path: target_repo
          fetch-depth: 0

      - name: Deploy storybook to target repo (checkout approach)
        env:
          TARGET_REPO: ${{ env.TARGET_REPO }}
          TARGET_DIR: target_repo
        run: |
          set -euo pipefail

          SRC_DIR="${GITHUB_WORKSPACE}/storybook-static"
          if [ ! -d "$SRC_DIR" ]; then
            echo "ERROR: storybook build output not found at ${SRC_DIR}"
            exit 1
          fi

          PACKAGE_VERSION=$(node -p "require('${GITHUB_WORKSPACE}/package.json').version")
          echo "Deploying storybook v${PACKAGE_VERSION} to ${TARGET_REPO}:main (path: static/storybook-static)"

          cd "${TARGET_DIR}"

          if git ls-remote --exit-code origin refs/heads/main >/dev/null 2>&1; then
            git fetch origin main
            git checkout main
            git reset --hard origin/main
          else
            git checkout --orphan main
            git rm -rf .
            git commit --allow-empty -m "chore: initialize main branch"
            git push origin main || true
          fi

          TARGET_PATH="static/storybook-static"
          echo "Removing old ${TARGET_PATH} (if exists)"
          rm -rf "${TARGET_PATH}" || true
          mkdir -p "$(dirname "${TARGET_PATH}")"

          echo "Copying new storybook static files..."
          cp -R "${SRC_DIR}/." "${TARGET_PATH}/"

          git config user.name "github-actions[bot]" || true
          git config user.email "github-actions[bot]@users.noreply.github.com" || true

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to deploy (storybook content identical)."
          else
            git commit -m "chore(storybook): deploy storybook v${PACKAGE_VERSION} from $GITHUB_REPOSITORY@${GITHUB_SHA}"
            git push origin main
            echo "Pushed storybook to ${TARGET_REPO}:main"
          fi

      - name: Done
        run: echo "Test -> Release -> Storybook deploy finished."
